// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package favourites_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FavouritesServiceClient is the client API for FavouritesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FavouritesServiceClient interface {
	ListFavourites(ctx context.Context, in *ListFavouritesRequest, opts ...grpc.CallOption) (*ListFavouritesResponse, error)
	MarkFavourite(ctx context.Context, in *FavouritesRequest, opts ...grpc.CallOption) (*FavouritesResponse, error)
	UnMarkFavourite(ctx context.Context, in *FavouritesRequest, opts ...grpc.CallOption) (*FavouritesResponse, error)
	ProductInFavourite(ctx context.Context, in *FavouritesRequest, opts ...grpc.CallOption) (*ProductInFavouritesResponse, error)
}

type favouritesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFavouritesServiceClient(cc grpc.ClientConnInterface) FavouritesServiceClient {
	return &favouritesServiceClient{cc}
}

func (c *favouritesServiceClient) ListFavourites(ctx context.Context, in *ListFavouritesRequest, opts ...grpc.CallOption) (*ListFavouritesResponse, error) {
	out := new(ListFavouritesResponse)
	err := c.cc.Invoke(ctx, "/favourites.FavouritesService/ListFavourites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favouritesServiceClient) MarkFavourite(ctx context.Context, in *FavouritesRequest, opts ...grpc.CallOption) (*FavouritesResponse, error) {
	out := new(FavouritesResponse)
	err := c.cc.Invoke(ctx, "/favourites.FavouritesService/MarkFavourite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favouritesServiceClient) UnMarkFavourite(ctx context.Context, in *FavouritesRequest, opts ...grpc.CallOption) (*FavouritesResponse, error) {
	out := new(FavouritesResponse)
	err := c.cc.Invoke(ctx, "/favourites.FavouritesService/UnMarkFavourite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favouritesServiceClient) ProductInFavourite(ctx context.Context, in *FavouritesRequest, opts ...grpc.CallOption) (*ProductInFavouritesResponse, error) {
	out := new(ProductInFavouritesResponse)
	err := c.cc.Invoke(ctx, "/favourites.FavouritesService/ProductInFavourite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FavouritesServiceServer is the server API for FavouritesService service.
// All implementations must embed UnimplementedFavouritesServiceServer
// for forward compatibility
type FavouritesServiceServer interface {
	ListFavourites(context.Context, *ListFavouritesRequest) (*ListFavouritesResponse, error)
	MarkFavourite(context.Context, *FavouritesRequest) (*FavouritesResponse, error)
	UnMarkFavourite(context.Context, *FavouritesRequest) (*FavouritesResponse, error)
	ProductInFavourite(context.Context, *FavouritesRequest) (*ProductInFavouritesResponse, error)
	mustEmbedUnimplementedFavouritesServiceServer()
}

// UnimplementedFavouritesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFavouritesServiceServer struct {
}

func (UnimplementedFavouritesServiceServer) ListFavourites(context.Context, *ListFavouritesRequest) (*ListFavouritesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFavourites not implemented")
}
func (UnimplementedFavouritesServiceServer) MarkFavourite(context.Context, *FavouritesRequest) (*FavouritesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkFavourite not implemented")
}
func (UnimplementedFavouritesServiceServer) UnMarkFavourite(context.Context, *FavouritesRequest) (*FavouritesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnMarkFavourite not implemented")
}
func (UnimplementedFavouritesServiceServer) ProductInFavourite(context.Context, *FavouritesRequest) (*ProductInFavouritesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductInFavourite not implemented")
}
func (UnimplementedFavouritesServiceServer) mustEmbedUnimplementedFavouritesServiceServer() {}

// UnsafeFavouritesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FavouritesServiceServer will
// result in compilation errors.
type UnsafeFavouritesServiceServer interface {
	mustEmbedUnimplementedFavouritesServiceServer()
}

func RegisterFavouritesServiceServer(s grpc.ServiceRegistrar, srv FavouritesServiceServer) {
	s.RegisterService(&FavouritesService_ServiceDesc, srv)
}

func _FavouritesService_ListFavourites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFavouritesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavouritesServiceServer).ListFavourites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/favourites.FavouritesService/ListFavourites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavouritesServiceServer).ListFavourites(ctx, req.(*ListFavouritesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FavouritesService_MarkFavourite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavouritesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavouritesServiceServer).MarkFavourite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/favourites.FavouritesService/MarkFavourite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavouritesServiceServer).MarkFavourite(ctx, req.(*FavouritesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FavouritesService_UnMarkFavourite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavouritesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavouritesServiceServer).UnMarkFavourite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/favourites.FavouritesService/UnMarkFavourite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavouritesServiceServer).UnMarkFavourite(ctx, req.(*FavouritesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FavouritesService_ProductInFavourite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavouritesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavouritesServiceServer).ProductInFavourite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/favourites.FavouritesService/ProductInFavourite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavouritesServiceServer).ProductInFavourite(ctx, req.(*FavouritesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FavouritesService_ServiceDesc is the grpc.ServiceDesc for FavouritesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FavouritesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "favourites.FavouritesService",
	HandlerType: (*FavouritesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListFavourites",
			Handler:    _FavouritesService_ListFavourites_Handler,
		},
		{
			MethodName: "MarkFavourite",
			Handler:    _FavouritesService_MarkFavourite_Handler,
		},
		{
			MethodName: "UnMarkFavourite",
			Handler:    _FavouritesService_UnMarkFavourite_Handler,
		},
		{
			MethodName: "ProductInFavourite",
			Handler:    _FavouritesService_ProductInFavourite_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "favourites.proto",
}
